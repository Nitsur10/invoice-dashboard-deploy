issues:
  - title: "Fix dashboard trend percentage logic"
    body: |
      Problem: Stats cards treat absolute totals as percentages, showing values like “125.0%” for 125 invoices.
      Impact: Finance stakeholders receive misleading KPIs and may make incorrect decisions.
      Recommendation:
        - Adjust `/api/stats` to return true month-over-month deltas (or `N/A` when unavailable).
        - Update `StatsCards` to render the new delta fields and guard against null values.
        - Add lightweight validation/tests to prevent regressions.
      Acceptance:
        - Dashboard trend badges display correct percentages or `N/A` when no prior data exists.
        - API contract documents the new fields and passes automated checks.
      Notes: See `docs/issues/issue-001-trend-delta.md` for background.
    labels: ["frontend", "analytics"]
    priority: "P1"

  - title: "Refine invoice status derivation across APIs"
    body: |
      Problem: `deriveInvoiceStatus` marks all invoices issued before 1 May 2025 as paid, hiding potential overdue items.
      Impact: Dashboard and invoice list under-report outstanding liabilities.
      Recommendation:
        - Respect stored status fields when present and remove the unconditional pre-2025 paid rule.
        - Derive pending/overdue status using `amount_due` and `due_date` regardless of issue date.
        - Ensure both `/api/invoices` and `/api/stats` share the corrected logic.
      Acceptance:
        - Legacy invoices (if present) reflect true status in list and metrics.
        - Regression tests or logs confirm consistent behaviour post-2025.
      Notes: See `docs/issues/issue-002-status-derivation.md`.
    labels: ["backend", "finance"]
    priority: "P1"

  - title: "Surface stats API failures with user feedback"
    body: |
      Problem: `fetchDashboardStats` swallows errors and returns zero values, making outages appear as empty data.
      Impact: Users assume business performance collapsed instead of noticing an API failure.
      Recommendation:
        - Propagate errors through React Query so `DashboardStatsProvider` reports `isError`.
        - Show an error card/toast with retry on the dashboard when the API fails.
        - Log failures for observability.
      Acceptance:
        - Simulated API failure shows error UI instead of zero stats.
        - Successful calls remain unaffected.
      Notes: See `docs/issues/issue-003-stats-error-handling.md`.
    labels: ["frontend", "reliability"]
    priority: "P1"

  - title: "Harden Supabase admin client configuration"
    body: |
      Problem: `supabaseAdmin` initialises with an undefined service-role key when env vars are missing, leading to runtime crashes.
      Impact: Local developers and misconfigured deploys fail without actionable guidance.
      Recommendation:
        - Lazily create the client only when both URL and key are present.
        - Emit descriptive errors or fall back to mock data when configuration is incomplete.
        - Add documentation/tests covering the missing-env scenario.
      Acceptance:
        - Local run without service key yields clear warning and mock data, not a crash.
        - Production startup fails fast with actionable messaging if env vars absent.
      Notes: See `docs/issues/issue-004-supabase-env.md`.
    labels: ["backend", "devops"]
    priority: "P2"

  - title: "Implement month-over-month trend metrics pipeline"
    body: |
      Problem: Dashboard lacks reliable MoM analytics sourced from Supabase/n8n workflow outputs.
      Impact: Finance teams cannot track growth or regression accurately.
      Recommendation:
        - Create a Supabase materialized view (or table) that aggregates invoices by month starting 1 May 2025.
        - Update `/api/stats` to consume the view and compute MoM percentage deltas.
        - Ensure `StatsCards` render the new data with fallbacks when prior month missing.
      Acceptance:
        - Materialized view/script checked into repo; refresh strategy documented.
        - API and UI display correct MoM metrics validated against sample data.
      Notes: See `docs/issues/issue-005-mom-trends.md`.
    labels: ["analytics", "backend"]
    priority: "P2"

  - title: "Make status summary cards act as quick filters"
    body: |
      Problem: Summary cards on the invoices page (Pending/Paid/Overdue) are static and don’t adjust the table.
      Impact: Users expect to click the cards to drill into matching invoices.
      Recommendation:
        - Hook card clicks into `useInvoiceFilters` to set/clear the status filter.
        - Provide toggle behaviour so clicking an active card removes the filter.
        - Ensure accessibility (keyboard activation + ARIA feedback) and mobile support.
      Acceptance:
        - Clicking Pending shows only pending invoices; Paid and Overdue behave similarly.
        - Clicking an active card again clears the filter and restores previous view.
        - Filter chips/sidebar reflect the active status.
      Notes: See `docs/issues/issue-006-invoice-card-filter.md`.
    labels: ["frontend", "ux"]
    priority: "P2"

  - title: "Move invoice filters to top-right popover"
    body: |
      Problem: Invoice filters live in a left sidebar/drawer; facets often appear blank and UX differs from Kanban board.
      Impact: Feels inconsistent and wastes horizontal space.
      Recommendation:
        - Replace sidebar with a top-right filter button (next to Export CSV) that opens a populated popover.
        - Preload facets (status/category/vendor) so options appear immediately or show skeleton while loading.
        - Preserve existing filter syncing with chips/context; ensure mobile users get the drawer treatment.
      Acceptance:
        - Filter button opens a compact panel containing all available filter controls with populated options.
        - Sidebar removed; layout resembles Kanban filter behaviour.
        - Works with keyboard, screen readers, and mobile breakpoints.
      Notes: See `docs/issues/issue-007-invoice-filter-ui.md`.
    labels: ["frontend", "ux", "product"]
    priority: "P1"

  - title: "Replace supplier column with description in invoice list"
    body: |
      Problem: The invoice table shows supplier name; stakeholders prefer to see the description (line one) with hover for full text.
      Impact: Users scan for descriptions and currently have to drill into details.
      Recommendation:
        - Swap the supplier column for a description column with truncation and tooltip on hover.
        - Ensure full description is accessible for keyboard users (focus tooltip).
        - Keep supplier data available via filters/export as needed.
      Acceptance:
        - Table displays truncated description; hovering/focusing reveals full text.
        - Layout remains responsive; no loss of supplier filtering capability.
      Notes: See `docs/issues/issue-008-invoice-description-column.md`.
    labels: ["frontend", "ux"]
    priority: "P2"

  - title: "Fix invoice summary cards to show database totals not page counts"
    body: |
      Problem: Invoice page summary cards (Pending/Paid/Overdue) calculate counts from current page data only, not the entire database.
      Impact: When users navigate to page 2+, the status counts are misleading and don't reflect true business metrics.
      Recommendation:
        - Move status aggregation from client-side to backend in `/api/invoices` response or create dedicated stats endpoint.
        - Update invoices page to display true database totals for each status regardless of pagination.
        - Maintain "Current Page Total" as page-specific sum while other cards show global counts.
        - Use efficient database aggregation (e.g., COUNT with GROUP BY) to avoid performance issues.
      Acceptance:
        - Pending/Paid/Overdue cards display accurate totals across entire database.
        - Counts remain correct when user changes pages or applies filters.
        - Stats load performantly (< 500ms) and don't degrade table loading speed.
        - Total Invoices count continues to work correctly from pagination.total.
      Notes: See `docs/issues/issue-009-invoice-stats-accuracy.md`. Current bug at `src/app/(dashboard)/invoices/page.tsx:172-184`.
    labels: ["frontend", "backend", "analytics"]
    priority: "P1"

  - title: "Implement mobile & desktop responsive design"
    body: |
      Problem: Dashboard uses fixed 288px sidebar layout that breaks on mobile devices (< 768px). Invoice table with 10+ columns is unusable on small screens. Users cannot access navigation, view invoices, or interpret charts on mobile.
      Impact: Mobile users (field workers, executives) cannot use the application, limiting accessibility and market reach.
      Recommendation:
        - Refactor layout to use collapsible sidebar with mobile drawer pattern (hamburger menu).
        - Implement card-based mobile view for invoice table as alternative to horizontal scroll.
        - Optimize dashboard grids and charts for tablet (768-1024px) and mobile (< 768px) breakpoints.
        - Ensure touch-friendly interactions (44x44px minimum) and accessibility compliance.
        - Add responsive utility hooks (useMediaQuery, useBreakpoint) for component logic.
      Acceptance:
        - Sidebar collapses to drawer on mobile with hamburger toggle; main content adjusts padding.
        - Invoice table renders as card list on mobile, shows essential data with expand option.
        - Dashboard grids use responsive columns (1 → 2 → 4 → 5 based on viewport).
        - Charts readable on mobile with appropriate heights and label strategies.
        - All touch targets ≥ 44x44px; no horizontal scroll on any viewport.
        - Lighthouse mobile score > 90; E2E tests pass on mobile viewports.
        - Desktop experience maintained without regressions.
      Notes: See docs/issues/issue-010-mobile-responsiveness.md and docs/findings/mobile-responsiveness-assessment.md. Estimated effort: 15-25 days.
    labels: ["frontend", "ux", "mobile", "responsive", "accessibility", "enhancement"]
    priority: "P1"

  - title: "Kanban board UX improvements: description overflow and clickable status cards"
    body: |
      Problem: (1) Invoice descriptions overflow kanban cards and get cut off mid-sentence, making cards difficult to read. (2) Status summary cards (Pending, In Review, Approved, Paid, Overdue) are not clickable filters like they are on the Invoices page, forcing users to use the filter drawer for basic status filtering.
      Impact: Poor card readability reduces usability. Inconsistent UX between pages creates confusion and requires extra clicks for common filtering actions.
      Recommendation:
        - Fix description overflow using Tailwind's line-clamp-2 utility for clean truncation with ellipsis.
        - Add tooltip (title attribute) to show full description on hover.
        - Make all 5 status cards clickable filters using proven pattern from Invoices page.
        - Add visual feedback (hover states, active ring indicators) and accessibility support (keyboard nav, screen reader).
        - Preserve existing drag-and-drop functionality.
      Acceptance:
        - Long descriptions truncate after 2 lines with ellipsis; full text visible on hover.
        - Cards maintain consistent height across all statuses.
        - Clicking status card filters kanban board; active filter shows ring indicator.
        - Filter chips update when clicking status cards; clicking again toggles filter off.
        - Keyboard navigation works (Tab + Enter/Space); screen reader announces filter state.
        - All 5 status cards work; Total cards remain non-interactive.
        - Drag-and-drop functionality preserved; no TypeScript errors.
      Notes: See `docs/issues/issue-011-kanban-ux-improvements.md` and `docs/specs/ISSUE-011.mdx`. Screenshot: `Screenshots/Screenshot 2025-10-04 at 10.52.03 pm.png`. Estimated effort: 30 minutes.
    labels: ["frontend", "ux", "kanban", "enhancement", "accessibility"]
    priority: "P2"

  - title: "UI Cleanup & Invoice Status Update Bug Fix"
    body: |
      Problem: Two-part issue: (1) Sidebar shows all navigation links and dashboard displays Monthly Growth card for incomplete features. (2) Invoice status update dropdown does not persist changes to Supabase backend, causing critical data integrity issues.
      Impact: Users access incomplete features causing confusion. More critically, users believe invoice status updates are saved but changes are lost on page refresh, undermining trust and causing finance teams to make decisions on stale data.
      Recommendation:
        - Part 1: Disable Kanban, Analytics, Settings sidebar links with visual feedback (50% opacity, "Soon" badge, cursor-not-allowed). Remove Monthly Growth card from dashboard and adjust grid to 3 columns.
        - Part 2: Create/fix PATCH `/api/invoices/[id]` endpoint with Supabase integration. Add React Query mutation with error handling. Restrict status dropdown to "Paid" option only. Add loading states and toast notifications. Verify/create Supabase RLS policies for updates. Add comprehensive E2E testing.
      Acceptance:
        - Kanban/Analytics/Settings links disabled with "Soon" badge; Dashboard/Invoices remain active.
        - Monthly Growth card removed; dashboard shows 3 stats cards in adjusted grid.
        - Status dropdown restricted to "Paid" option (others disabled/hidden).
        - Selecting "Paid" persists to Supabase with success toast; page refresh maintains status.
        - Error scenarios show error toast and revert UI; no console errors.
        - RLS policies enforce invoice owner-only updates; E2E tests pass.
      Notes: See `docs/issues/issue-014-ui-cleanup-status-update.md`. Status update bug is CRITICAL - blocks production deployment. Estimated effort: 3.5-4 hours (30min UI cleanup + 2-3hrs status fix).
    labels: ["critical", "bug", "frontend", "backend", "data-integrity", "ui-cleanup", "supabase", "invoices"]
    priority: "P0"

